name: docker

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  push:
    branches:
      - main
    paths:
      - "container/**"
      - ".github/workflows/docker.yml"
  pull_request:
    paths:
      - "container/**"
      - ".github/workflows/docker.yml"
  workflow_dispatch:
 
env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: jet1090

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release version
        id: release
        run: |
          RESPONSE=$(curl -s https://api.github.com/repos/xoolive/rs1090/releases/latest)
          TAG_VERSION=$(echo $RESPONSE | jq -r .tag_name)

          # Remove the 'v'
          LATEST_VERSION=${TAG_VERSION#v}

          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          echo "Found version: ${LATEST_VERSION} (from tag: ${TAG_VERSION})"

      - name: Set Docker tags
        id: meta
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          TAGS="${REGISTRY}/${OWNER}/${IMAGE_NAME}:latest"

          if [ -n "$VERSION" ]; then
            TAGS="${TAGS},${REGISTRY}/${OWNER}/${IMAGE_NAME}:${VERSION}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Using tags: ${TAGS}"

      - name: Login to GitHub Container Registry
        if: github.event_name == 'workflow_run'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/container
          file: ${{ github.workspace }}/container/jet1090.Dockerfile
          push: ${{ github.event_name == 'workflow_run' }}
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
